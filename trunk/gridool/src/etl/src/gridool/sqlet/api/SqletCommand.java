/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package gridool.sqlet.api;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class SqletCommand
        implements org.apache.thrift.TBase<SqletCommand, SqletCommand._Fields>,
        java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SqletCommand");

    private static final org.apache.thrift.protocol.TField CMD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdType", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField CATALOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogName", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

    private CommandType cmdType; // required
    private String command; // required
    private String catalogName; // required
    private CommandOption option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * 
         * @see CommandType
         */
        CMD_TYPE((short) 1, "cmdType"), COMMAND((short) 2, "command"), CATALOG_NAME((short) 3,
                "catalogName"), OPTION((short) 4, "option");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for(_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // CMD_TYPE
                    return CMD_TYPE;
                case 2: // COMMAND
                    return COMMAND;
                case 3: // CATALOG_NAME
                    return CATALOG_NAME;
                case 4: // OPTION
                    return OPTION;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if(fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CMD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cmdType", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommandType.class)));
        tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CATALOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("catalogName", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandOption.class)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SqletCommand.class, metaDataMap);
    }

    public SqletCommand() {
        this.catalogName = "default";

    }

    public SqletCommand(CommandType cmdType, String command) {
        this();
        this.cmdType = cmdType;
        this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SqletCommand(SqletCommand other) {
        if(other.isSetCmdType()) {
            this.cmdType = other.cmdType;
        }
        if(other.isSetCommand()) {
            this.command = other.command;
        }
        if(other.isSetCatalogName()) {
            this.catalogName = other.catalogName;
        }
        if(other.isSetOption()) {
            this.option = new CommandOption(other.option);
        }
    }

    public SqletCommand deepCopy() {
        return new SqletCommand(this);
    }

    @Override
    public void clear() {
        this.cmdType = null;
        this.command = null;
        this.catalogName = "default";

        this.option = null;
    }

    /**
     * 
     * @see CommandType
     */
    public CommandType getCmdType() {
        return this.cmdType;
    }

    /**
     * 
     * @see CommandType
     */
    public void setCmdType(CommandType cmdType) {
        this.cmdType = cmdType;
    }

    public void unsetCmdType() {
        this.cmdType = null;
    }

    /** Returns true if field cmdType is set (has been assigned a value) and false otherwise */
    public boolean isSetCmdType() {
        return this.cmdType != null;
    }

    public void setCmdTypeIsSet(boolean value) {
        if(!value) {
            this.cmdType = null;
        }
    }

    public String getCommand() {
        return this.command;
    }

    public void setCommand(String command) {
        this.command = command;
    }

    public void unsetCommand() {
        this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
        return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
        if(!value) {
            this.command = null;
        }
    }

    public String getCatalogName() {
        return this.catalogName;
    }

    public void setCatalogName(String catalogName) {
        this.catalogName = catalogName;
    }

    public void unsetCatalogName() {
        this.catalogName = null;
    }

    /** Returns true if field catalogName is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogName() {
        return this.catalogName != null;
    }

    public void setCatalogNameIsSet(boolean value) {
        if(!value) {
            this.catalogName = null;
        }
    }

    public CommandOption getOption() {
        return this.option;
    }

    public void setOption(CommandOption option) {
        this.option = option;
    }

    public void unsetOption() {
        this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
        return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
        if(!value) {
            this.option = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case CMD_TYPE:
                if(value == null) {
                    unsetCmdType();
                } else {
                    setCmdType((CommandType) value);
                }
                break;

            case COMMAND:
                if(value == null) {
                    unsetCommand();
                } else {
                    setCommand((String) value);
                }
                break;

            case CATALOG_NAME:
                if(value == null) {
                    unsetCatalogName();
                } else {
                    setCatalogName((String) value);
                }
                break;

            case OPTION:
                if(value == null) {
                    unsetOption();
                } else {
                    setOption((CommandOption) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case CMD_TYPE:
                return getCmdType();

            case COMMAND:
                return getCommand();

            case CATALOG_NAME:
                return getCatalogName();

            case OPTION:
                return getOption();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if(field == null) {
            throw new IllegalArgumentException();
        }

        switch(field) {
            case CMD_TYPE:
                return isSetCmdType();
            case COMMAND:
                return isSetCommand();
            case CATALOG_NAME:
                return isSetCatalogName();
            case OPTION:
                return isSetOption();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if(that == null)
            return false;
        if(that instanceof SqletCommand)
            return this.equals((SqletCommand) that);
        return false;
    }

    public boolean equals(SqletCommand that) {
        if(that == null)
            return false;

        boolean this_present_cmdType = true && this.isSetCmdType();
        boolean that_present_cmdType = true && that.isSetCmdType();
        if(this_present_cmdType || that_present_cmdType) {
            if(!(this_present_cmdType && that_present_cmdType))
                return false;
            if(!this.cmdType.equals(that.cmdType))
                return false;
        }

        boolean this_present_command = true && this.isSetCommand();
        boolean that_present_command = true && that.isSetCommand();
        if(this_present_command || that_present_command) {
            if(!(this_present_command && that_present_command))
                return false;
            if(!this.command.equals(that.command))
                return false;
        }

        boolean this_present_catalogName = true && this.isSetCatalogName();
        boolean that_present_catalogName = true && that.isSetCatalogName();
        if(this_present_catalogName || that_present_catalogName) {
            if(!(this_present_catalogName && that_present_catalogName))
                return false;
            if(!this.catalogName.equals(that.catalogName))
                return false;
        }

        boolean this_present_option = true && this.isSetOption();
        boolean that_present_option = true && that.isSetOption();
        if(this_present_option || that_present_option) {
            if(!(this_present_option && that_present_option))
                return false;
            if(!this.option.equals(that.option))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(SqletCommand other) {
        if(!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        SqletCommand typedOther = (SqletCommand) other;

        lastComparison = Boolean.valueOf(isSetCmdType()).compareTo(typedOther.isSetCmdType());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetCmdType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdType, typedOther.cmdType);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCommand()).compareTo(typedOther.isSetCommand());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetCommand()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, typedOther.command);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCatalogName()).compareTo(typedOther.isSetCatalogName());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetCatalogName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogName, typedOther.catalogName);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOption()).compareTo(typedOther.isSetOption());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetOption()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, typedOther.option);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while(true) {
            field = iprot.readFieldBegin();
            if(field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch(field.id) {
                case 1: // CMD_TYPE
                    if(field.type == org.apache.thrift.protocol.TType.I32) {
                        this.cmdType = CommandType.findByValue(iprot.readI32());
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // COMMAND
                    if(field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.command = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // CATALOG_NAME
                    if(field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.catalogName = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // OPTION
                    if(field.type == org.apache.thrift.protocol.TType.STRUCT) {
                        this.option = new CommandOption();
                        this.option.read(iprot);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if(this.cmdType != null) {
            oprot.writeFieldBegin(CMD_TYPE_FIELD_DESC);
            oprot.writeI32(this.cmdType.getValue());
            oprot.writeFieldEnd();
        }
        if(this.command != null) {
            oprot.writeFieldBegin(COMMAND_FIELD_DESC);
            oprot.writeString(this.command);
            oprot.writeFieldEnd();
        }
        if(this.catalogName != null) {
            if(isSetCatalogName()) {
                oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
                oprot.writeString(this.catalogName);
                oprot.writeFieldEnd();
            }
        }
        if(this.option != null) {
            if(isSetOption()) {
                oprot.writeFieldBegin(OPTION_FIELD_DESC);
                this.option.write(oprot);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SqletCommand(");
        boolean first = true;

        sb.append("cmdType:");
        if(this.cmdType == null) {
            sb.append("null");
        } else {
            sb.append(this.cmdType);
        }
        first = false;
        if(!first)
            sb.append(", ");
        sb.append("command:");
        if(this.command == null) {
            sb.append("null");
        } else {
            sb.append(this.command);
        }
        first = false;
        if(isSetCatalogName()) {
            if(!first)
                sb.append(", ");
            sb.append("catalogName:");
            if(this.catalogName == null) {
                sb.append("null");
            } else {
                sb.append(this.catalogName);
            }
            first = false;
        }
        if(isSetOption()) {
            if(!first)
                sb.append(", ");
            sb.append("option:");
            if(this.option == null) {
                sb.append("null");
            } else {
                sb.append(this.option);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}
