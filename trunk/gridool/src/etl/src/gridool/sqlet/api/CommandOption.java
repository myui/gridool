/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package gridool.sqlet.api;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class CommandOption
        implements org.apache.thrift.TBase<CommandOption, CommandOption._Fields>,
        java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommandOption");

    private static final org.apache.thrift.protocol.TField CATALOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short) 2);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private String catalogName; // required
    private Map<String, String> properties; // required
    private String comment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CATALOG_NAME((short) 1, "catalogName"), PROPERTIES((short) 2, "properties"), COMMENT(
                (short) 3, "comment");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for(_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // CATALOG_NAME
                    return CATALOG_NAME;
                case 2: // PROPERTIES
                    return PROPERTIES;
                case 3: // COMMENT
                    return COMMENT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if(fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CATALOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("catalogName", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommandOption.class, metaDataMap);
    }

    public CommandOption() {
        this.catalogName = "default";

    }

    public CommandOption(String catalogName, Map<String, String> properties) {
        this();
        this.catalogName = catalogName;
        this.properties = properties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CommandOption(CommandOption other) {
        if(other.isSetCatalogName()) {
            this.catalogName = other.catalogName;
        }
        if(other.isSetProperties()) {
            Map<String, String> __this__properties = new HashMap<String, String>();
            for(Map.Entry<String, String> other_element : other.properties.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__properties_copy_key = other_element_key;

                String __this__properties_copy_value = other_element_value;

                __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
            }
            this.properties = __this__properties;
        }
        if(other.isSetComment()) {
            this.comment = other.comment;
        }
    }

    public CommandOption deepCopy() {
        return new CommandOption(this);
    }

    @Override
    public void clear() {
        this.catalogName = "default";

        this.properties = null;
        this.comment = null;
    }

    public String getCatalogName() {
        return this.catalogName;
    }

    public void setCatalogName(String catalogName) {
        this.catalogName = catalogName;
    }

    public void unsetCatalogName() {
        this.catalogName = null;
    }

    /** Returns true if field catalogName is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalogName() {
        return this.catalogName != null;
    }

    public void setCatalogNameIsSet(boolean value) {
        if(!value) {
            this.catalogName = null;
        }
    }

    public int getPropertiesSize() {
        return (this.properties == null) ? 0 : this.properties.size();
    }

    public void putToProperties(String key, String val) {
        if(this.properties == null) {
            this.properties = new HashMap<String, String>();
        }
        this.properties.put(key, val);
    }

    public Map<String, String> getProperties() {
        return this.properties;
    }

    public void setProperties(Map<String, String> properties) {
        this.properties = properties;
    }

    public void unsetProperties() {
        this.properties = null;
    }

    /** Returns true if field properties is set (has been assigned a value) and false otherwise */
    public boolean isSetProperties() {
        return this.properties != null;
    }

    public void setPropertiesIsSet(boolean value) {
        if(!value) {
            this.properties = null;
        }
    }

    public String getComment() {
        return this.comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public void unsetComment() {
        this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
        return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
        if(!value) {
            this.comment = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case CATALOG_NAME:
                if(value == null) {
                    unsetCatalogName();
                } else {
                    setCatalogName((String) value);
                }
                break;

            case PROPERTIES:
                if(value == null) {
                    unsetProperties();
                } else {
                    setProperties((Map<String, String>) value);
                }
                break;

            case COMMENT:
                if(value == null) {
                    unsetComment();
                } else {
                    setComment((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case CATALOG_NAME:
                return getCatalogName();

            case PROPERTIES:
                return getProperties();

            case COMMENT:
                return getComment();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if(field == null) {
            throw new IllegalArgumentException();
        }

        switch(field) {
            case CATALOG_NAME:
                return isSetCatalogName();
            case PROPERTIES:
                return isSetProperties();
            case COMMENT:
                return isSetComment();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if(that == null)
            return false;
        if(that instanceof CommandOption)
            return this.equals((CommandOption) that);
        return false;
    }

    public boolean equals(CommandOption that) {
        if(that == null)
            return false;

        boolean this_present_catalogName = true && this.isSetCatalogName();
        boolean that_present_catalogName = true && that.isSetCatalogName();
        if(this_present_catalogName || that_present_catalogName) {
            if(!(this_present_catalogName && that_present_catalogName))
                return false;
            if(!this.catalogName.equals(that.catalogName))
                return false;
        }

        boolean this_present_properties = true && this.isSetProperties();
        boolean that_present_properties = true && that.isSetProperties();
        if(this_present_properties || that_present_properties) {
            if(!(this_present_properties && that_present_properties))
                return false;
            if(!this.properties.equals(that.properties))
                return false;
        }

        boolean this_present_comment = true && this.isSetComment();
        boolean that_present_comment = true && that.isSetComment();
        if(this_present_comment || that_present_comment) {
            if(!(this_present_comment && that_present_comment))
                return false;
            if(!this.comment.equals(that.comment))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(CommandOption other) {
        if(!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        CommandOption typedOther = (CommandOption) other;

        lastComparison = Boolean.valueOf(isSetCatalogName()).compareTo(typedOther.isSetCatalogName());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetCatalogName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogName, typedOther.catalogName);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProperties()).compareTo(typedOther.isSetProperties());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetProperties()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, typedOther.properties);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
        if(lastComparison != 0) {
            return lastComparison;
        }
        if(isSetComment()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
            if(lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while(true) {
            field = iprot.readFieldBegin();
            if(field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch(field.id) {
                case 1: // CATALOG_NAME
                    if(field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.catalogName = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // PROPERTIES
                    if(field.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                            this.properties = new HashMap<String, String>(2 * _map0.size);
                            for(int _i1 = 0; _i1 < _map0.size; ++_i1) {
                                String _key2; // required
                                String _val3; // required
                                _key2 = iprot.readString();
                                _val3 = iprot.readString();
                                this.properties.put(_key2, _val3);
                            }
                            iprot.readMapEnd();
                        }
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COMMENT
                    if(field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.comment = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if(this.catalogName != null) {
            oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
            oprot.writeString(this.catalogName);
            oprot.writeFieldEnd();
        }
        if(this.properties != null) {
            oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
            {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.properties.size()));
                for(Map.Entry<String, String> _iter4 : this.properties.entrySet()) {
                    oprot.writeString(_iter4.getKey());
                    oprot.writeString(_iter4.getValue());
                }
                oprot.writeMapEnd();
            }
            oprot.writeFieldEnd();
        }
        if(this.comment != null) {
            if(isSetComment()) {
                oprot.writeFieldBegin(COMMENT_FIELD_DESC);
                oprot.writeString(this.comment);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CommandOption(");
        boolean first = true;

        sb.append("catalogName:");
        if(this.catalogName == null) {
            sb.append("null");
        } else {
            sb.append(this.catalogName);
        }
        first = false;
        if(!first)
            sb.append(", ");
        sb.append("properties:");
        if(this.properties == null) {
            sb.append("null");
        } else {
            sb.append(this.properties);
        }
        first = false;
        if(isSetComment()) {
            if(!first)
                sb.append(", ");
            sb.append("comment:");
            if(this.comment == null) {
                sb.append("null");
            } else {
                sb.append(this.comment);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}
