<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_CommandType'] = array(
  'MAP_SHUFFLE' => 0,
  'MAP_NO_COMPILE' => 1,
  'REDUCE' => 2,
);

final class CommandType {
  const MAP_SHUFFLE = 0;
  const MAP_NO_COMPILE = 1;
  const REDUCE = 2;
  static public $__names = array(
    0 => 'MAP_SHUFFLE',
    1 => 'MAP_NO_COMPILE',
    2 => 'REDUCE',
  );
}

$GLOBALS['E_ErrorType'] = array(
  'PARSE' => 0,
  'EXECUTION' => 1,
  'UNSUPPORTED' => 2,
);

final class ErrorType {
  const PARSE = 0;
  const EXECUTION = 1;
  const UNSUPPORTED = 2;
  static public $__names = array(
    0 => 'PARSE',
    1 => 'EXECUTION',
    2 => 'UNSUPPORTED',
  );
}

$GLOBALS['E_InputOutputType'] = array(
  'CSV' => 0,
  'JSON' => 1,
  'XML' => 2,
);

final class InputOutputType {
  const CSV = 0;
  const JSON = 1;
  const XML = 2;
  static public $__names = array(
    0 => 'CSV',
    1 => 'JSON',
    2 => 'XML',
  );
}

class CommandOption {
  static $_TSPEC;

  public $properties = null;
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'properties',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['properties'])) {
        $this->properties = $vals['properties'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'CommandOption';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->properties = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->properties[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommandOption');
    if ($this->properties !== null) {
      if (!is_array($this->properties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('properties', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->properties));
        {
          foreach ($this->properties as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 2);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SqletCommand {
  static $_TSPEC;

  public $cmdType = null;
  public $command = null;
  public $catalogName = "default";
  public $option = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmdType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'command',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'catalogName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'option',
          'type' => TType::STRUCT,
          'class' => 'CommandOption',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cmdType'])) {
        $this->cmdType = $vals['cmdType'];
      }
      if (isset($vals['command'])) {
        $this->command = $vals['command'];
      }
      if (isset($vals['catalogName'])) {
        $this->catalogName = $vals['catalogName'];
      }
      if (isset($vals['option'])) {
        $this->option = $vals['option'];
      }
    }
  }

  public function getName() {
    return 'SqletCommand';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cmdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->catalogName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->option = new CommandOption();
            $xfer += $this->option->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SqletCommand');
    if ($this->cmdType !== null) {
      $xfer += $output->writeFieldBegin('cmdType', TType::I32, 1);
      $xfer += $output->writeI32($this->cmdType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->command !== null) {
      $xfer += $output->writeFieldBegin('command', TType::STRING, 2);
      $xfer += $output->writeString($this->command);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->catalogName !== null) {
      $xfer += $output->writeFieldBegin('catalogName', TType::STRING, 3);
      $xfer += $output->writeString($this->catalogName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->option !== null) {
      if (!is_object($this->option)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('option', TType::STRUCT, 4);
      $xfer += $this->option->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SqletServiceException extends TException {
  static $_TSPEC;

  public $type = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SqletServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SqletServiceException');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
