#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module CommandType
  MAP_SHUFFLE = 0
  MAP_NO_COMPILE = 1
  REDUCE = 2
  EXT_SCRIPT = 3
  VALUE_MAP = {0 => "MAP_SHUFFLE", 1 => "MAP_NO_COMPILE", 2 => "REDUCE", 3 => "EXT_SCRIPT"}
  VALID_VALUES = Set.new([MAP_SHUFFLE, MAP_NO_COMPILE, REDUCE, EXT_SCRIPT]).freeze
end

module ErrorType
  PARSE = 0
  EXECUTION = 1
  UNSUPPORTED = 2
  VALUE_MAP = {0 => "PARSE", 1 => "EXECUTION", 2 => "UNSUPPORTED"}
  VALID_VALUES = Set.new([PARSE, EXECUTION, UNSUPPORTED]).freeze
end

module InputOutputType
  CSV = 0
  JSON = 1
  XML = 2
  VALUE_MAP = {0 => "CSV", 1 => "JSON", 2 => "XML"}
  VALID_VALUES = Set.new([CSV, JSON, XML]).freeze
end

class SqletCommand
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CMDTYPE = 1
  COMMAND = 2
  CATALOGNAME = 3
  PROPERTIES = 4
  COMMENT = 5

  FIELDS = {
    CMDTYPE => {:type => ::Thrift::Types::I32, :name => 'cmdType', :enum_class => CommandType},
    COMMAND => {:type => ::Thrift::Types::STRING, :name => 'command'},
    CATALOGNAME => {:type => ::Thrift::Types::STRING, :name => 'catalogName', :default => %q"default", :optional => true},
    PROPERTIES => {:type => ::Thrift::Types::MAP, :name => 'properties', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
    COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @cmdType.nil? || CommandType::VALID_VALUES.include?(@cmdType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field cmdType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SqletServiceException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  MESSAGE = 2

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ErrorType},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ErrorType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

